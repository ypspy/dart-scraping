# -*- coding: utf-8 -*-
"""
Created on Thu Aug 13 15:19:08 2020

@author: user
"""

from bs4 import BeautifulSoup
import os
import glob
import pandas as pd
import numpy as np

def col_span_count(soup):
    try:
        result = int(soup["colspan"])
    except KeyError:
        result= 1
    return result

def row_span_count(soup):
    try:
        result = int(soup["rowspan"])
    except KeyError:
        result= 1
    return result

def MatrixGenerator(table):
    table_row = table.find_all("tr")

    columnCount = 0
    for i in table_row:
        columnNumber = 0
        for j in i.find_all(["th", "td"]):
            try:
                columnNumber += int(j["colspan"])
            except KeyError:
                columnNumber += 1
            if columnNumber > columnCount:
                columnCount = columnNumber        
    rowCount = len(table_row)
    matrix = [['#' for x in range(columnCount)] for y in range(rowCount)] 
    for i in range(len(table_row)):
        locator = [i for i, x in enumerate(matrix[i]) if x=='#']  # https://stackoverflow.com/questions/9542738/python-find-in-list
        column, colSpan = 0, 0
        for j in table_row[i].find_all(["th", "td"]):
            rowSpanCount = row_span_count(j)
            colSpanCount = col_span_count(j)

            for k in range(rowSpanCount):
                for l in range(colSpanCount):
                    row = i + k
                    column = locator[l+colSpan]
                    matrix[row][column] = j.text.strip()
            colSpan += col_span_count(j)
    return matrix

# 1. 작업 폴더로 변경
os.chdir("C:\data\\")  # 작업 폴더로 변경

# 2. 타겟 폴더에 있는 필요 문서 경로 리스트업
pathList = []
for path in [".\A001_2014\\", ".\A001_2015\\", ".\A001_2016\\",
             ".\A001_2017\\", ".\A001_2018\\",
             ".\A001_2019\\", ".\A001_2020\\",
             ".\F001_2014\\", ".\F001_2015\\", ".\F001_2016\\",
             ".\F001_2017\\", ".\F001_2018\\",
             ".\F001_2019\\", ".\F001_2020\\",
             ".\F002_2014\\", ".\F002_2015\\", ".\F002_2016\\",
             ".\F002_2017\\", ".\F002_2018\\",
             ".\F002_2019\\", ".\F002_2020\\"              
              ]:
    path = path + "*외부감사실시내용*.*"  # 필요한 Keyword 입력
    pathInProcess = glob.glob(path)
    pathList= pathList + pathInProcess

# 3. 입수 과정에서 중복입수되어 표시된 duplicated 표시 파일 제거
pathList = [x for x in pathList if "duplicated" not in x]

# 4. 분리
pathList = [x for x in pathList if "(2014." in x] +\
           [x for x in pathList if "(2015." in x] +\
           [x for x in pathList if "(2016." in x] +\
           [x for x in pathList if "(2017." in x] +\
           [x for x in pathList if "(2018." in x] +\
           [x for x in pathList if "(2019." in x] 

# 5. Preprocess
PathListDf = pd.DataFrame(pathList)
df = pd.DataFrame([x.split("_") for x in pathList])
df["path"] = PathListDf[0]
df["con"] = df[6].str.contains("연결")
df['con'] = np.where(df['con']==True, "C", "S")
df['amend'] = df[6].str.contains("정정")
df['amend'] = np.where(df['amend']==True, "A", "B")
df["key"] = df[2] + df[6].str.slice(stop=10) + df["con"] + df["amend"] + df[5] + df[8] + df[10]
# key = 접수일 + 보고서 제출일(DRT 인증일) + 연결(C/S) + 정정(A/B) + 보고기간종료월 + 종목코드 + 법인등록번호

df["duplc"] = df.duplicated(subset=["key"], keep=False)
isTrue = df[df["duplc"] == True]
df = df.drop_duplicates(subset=["key"])

df = df.sort_values(by=[10, 5, "con", 2, 6, "amend"],
                    ascending=[True, True, True, False, False, True])
df["toDrop"] = 1

df = df.drop([0, 1, 14, "duplc"], axis=1)

for i in range(1, len(df)):
    if df.iloc[i,3] == df.iloc[i-1,3] and df.iloc[i,8] == df.iloc[i-1,8]:
        df.iloc[i, 16] = df.iloc[i-1, 16] + 1
    else:
        df.iloc[i, 16] = 1

df = df[df["toDrop"] == 1]
df = df.drop("toDrop", axis=1)

pathListOut = df["path"].tolist()
df = df.drop("path", axis=1)

result = []
count = 0

for file in pathListOut:

    html = open(file, "r", encoding="utf-8")
    soup = BeautifulSoup(html, "lxml")
    html.close()
    
    ptag = soup.find_all("p", string="3. 주요 감사실시내용")
    for sibling in ptag[0].next_siblings:
        if sibling.name == "table":
            table = sibling
            break
     
    matrix = MatrixGenerator(table)
      
    string = file + "_" + matrix[1][0] + "_" + matrix[1][2] + "_" + matrix[1][7] + "___" +  matrix[2][2]
    string = string.replace("\n"," ")

    result.append(string)
    
    i = 5
    while matrix[i][0] != "재고자산실사(입회)":
        string = file + "_" + matrix[i][0] + "_" + matrix[i][1] + "_" + matrix[i][2] + "_" + matrix[i][4] + "_" + matrix[i][6] + "_" + matrix[i][8] + "\n"
        string = string.replace("\n"," ")
        
        result.append(string)
        
        i += 1  
    
    count += 1
    print(count, end='  ')

dfActivity = pd.DataFrame([x.split("_") for x in result])

os.chdir(r"C:\\Users\\yoont\\Desktop\\") 
dfActivity.to_csv("wp01.data10.output.csv", sep="\t")
